In Hellboy the player is able to add one of three "charms" to their loadout, acting as a utility-focused power that they can use during combat. Two of these charms, the repel and the shield, were fairly simple as they just needed to either create a hitbox that applied a force to enemies caught in it (the repel charm) or stop the next instance of damage taken by the player from being applied (the shield charm).
The third charm was the knife charm, a weapon that I personally designed which provided utility through ignoring an enemy's armour as well as teleporting the player into melee range of them. Teleportation obviously carries a lot of potential risks when it comes to clipping out of bounds, so it was essential that the knife had a strong set of checks it could perform before teleporting the player.

When planning the functionality for the knife, the goals I set for myself were:
  - Don't allow teleporting if the player is already in melee range. This was mostly a personal preference, but I felt it would look more polished if the player only teleported when they were out of range and simply slashed the enemy without teleporting if they were able to.
  - The player must not be able to teleport to a location that could not be pathed to with regular movement. Due to the randomly generated layouts of the levels, I was worried that allowing the player to cross over gaps that they shouldn't be able to path over would introduce issues where some seeds could be trivialised or broken. As such I felt it was better to simply not allow for any large-scale skips to stop the problem from emerging.
  - The player mustn't be able to spawn inside another object.
  - In the event that the player uses their charm while the teleportation location is invalid there should be some sort of fallback to ensure their ability isn't wasted.


The code starts by checking the player locamotion for a lock-on target. If there's no target we simply do not teleport the player and can skip to the damage step. If there is a target, we compare the distance between the player and their target to a min-max threshold that is used to decide whether they are too close or too far from the enemy to teleport. While both of these scenarios will nullify the teleport, we need to differentiate between the two as 
we still want the melee range activation to deal damage normally, while using it from too far away should nullify the activation.
Once we know the player is in range to teleport, we calculate the position to spawn in by getting the direction from the target to the player and multiplying it by a small offset before adding it to the target position. This is to ensure the player spawns in front of the enemy in punching range.
Next we perform a check for any object marked as an obstacle within a meter radius of the spawn point in order to stop Hellboy from clipping into any pillars or vaultables inside of the arena. Originally I had hoped this wouldn't be necessary as I would be checking whether it was possible to path to the teleport point, but since the path calculation did not take the size of Hellboy into account it meant that it was possible to spawn at a point that was technically outside of the bounds of the obstacle while still being close enough that Hellboy's model would spawn inside.
Once we know there's no obstacle in the way, the last check is to calculate whether there is a valid path on the navmesh by using NavMesh.CalculatePath. If this check is successful, we can play the teleport effects, teleport the player and then spawn a damager at the teleport location.

An important part of this process was deciding on how the fallback for an invalid cast should be handled. The ideas that I considered were:
  - Checking x amount of locations around the target in a circle to see if there's another valid position that could be teleported to. This was decided against as we were worried about disorienting the player if the code decided that the only place they could spawn was at a completely different angle to where they started. We wanted the logic behind the teleporting to be consistent and predictable for the player, so this option was ruled out.
  - Not casting at all. We decided against this as we didn't want players to think the game was bugged due to the lack of feedback.
  - Ultimately I decided on having the animation play with no damager or teleportation and reducing the cooldown massively so that they weren't cheated out of using the item. I felt this was the best way to go as it still gave visual clarity that the knife had been activated, but made it obvious that something had gone wrong and the player should try casting it again. 

Towards the end of development a large-scale change was made that added increased theatrics to certain rooms in order to make levels less stale. These came in the form of two types of rooms that locked behind you after entering and spwaned enemies in real time as opposed to spawning them during level loading. 
This raised a potential issue with the knife, as in order for these rooms to work we needed to know that the player had walked through an entrance trigger inside the doorways to the room. While in theory there shouldn't be any issues due to the enemies in the room not spawning in until after you entered, it would have been possible for a player to bait an enemy from another room into one of these rooms and abuse the knockback on Hellboy's attacks to push them out of range of the door trigger before teleporting to them.
To avoid this, I added another check that would draw a ray between the player's start and end positions that was checked against each doorway to see if it passed through them. If it did, the room would be alerted that the player had entered so that it could function properly.
